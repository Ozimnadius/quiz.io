!function(E,t,e){"use strict";var r=function(){if(!(this instanceof r)){var e=new r;return e.init.call(e,Array.prototype.slice.call(arguments))}var o,n=null,l={includeEmptyValuedElements:!1,w3cSuccessfulControlsOnly:!1},i=/[^\[\]]+|\[\]/g,a=null;function f(e){if(e&&"object"==typeof e)return Object.keys(e).filter(function(e){return!isNaN(parseInt(e,10))}).splice(-1)[0]}function c(e){var n=f(e);return"string"==typeof n?parseInt(n,10)+1:0}function s(e){if("object"!=typeof e||null===e)return 0;var n,t=0;if("function"==typeof Object.keys)t=Object.keys(e).length;else for(n in e)e.hasOwnProperty(n)&&t++;return t}function p(e){return"INPUT"===e.nodeName&&"radio"===e.type}function v(e){return"INPUT"===e.nodeName&&"checkbox"===e.type}function d(e){return"SELECT"===e.nodeName&&"select-multiple"===e.type}function y(e){return e.checked}function m(e){if(p(e))return!!y(e)&&e.value;if(v(e))return!!y(e)&&e.value;if("INPUT"===(t=e).nodeName&&"file"===t.type)return!(!a.enctype||"multipart/form-data"!==a.enctype)&&(n=e,E.FileList&&n.files instanceof E.FileList&&0<e.files.length?e.files:!(!e.value||""===e.value)&&e.value);var n,t,r,u;if("TEXTAREA"===e.nodeName)return!(!e.value||""===e.value)&&e.value;if("SELECT"===(r=e).nodeName&&"select-one"===r.type)return e.value&&""!==e.value?e.value:!(!e.options||!e.options.length||""===e.options[0].value)&&e.options[0].value;if(d(e)){if(e.options&&0<e.options.length){var i=[];return function(e,n){if([].forEach)return[].forEach.call(e,n);var t;for(t=0;t<e.length;t++)n.call(e,e[t],t)}(e.options,function(e){e.selected&&i.push(e.value)}),l.includeEmptyValuedElements?i:!!i.length&&i}return!1}return"BUTTON"===(u=e).nodeName&&"submit"===u.type?e.value&&""!==e.value?e.value:!(!e.innerText||""===e.innerText)&&e.innerText:void 0!==e.value&&(l.includeEmptyValuedElements?e.value:""!==e.value&&e.value)}function h(e,n,t,r){var u,i=n[0];if(p(e))return!1!==t?r[i]=t:void 0;if(v(e)){if(!1===t)return;if(u=e.name,1<Array.prototype.filter.call(o,function(e){return e.name===u}).length)return r[i]||(r[i]=[]),r[i].push(t);r[i]=t}if(d(e)){if(!1===t)return;r[i]=t}return r[i]=t}function g(e,n,t,r){var u,i,o=n[0];return 1<n.length?"[]"===o?(r[c(r)]={},g(e,n.splice(1,n.length),t,r[(u=r,i=f(u),"string"==typeof i?parseInt(i,10):0)])):(r[o]&&0<s(r[o])||(r[o]={}),g(e,n.splice(1,n.length),t,r[o])):1===n.length?("[]"===o?r[c(r)]=t:h(e,n,t,r),r):void 0}return{init:function(e){return!(!e||"object"!=typeof e||!e[0])&&(n=e[0],void 0!==e[1]&&0<s(e[1])&&function(e,n){var t;for(t in n)n.hasOwnProperty(t)&&(e[t]=n[t])}(l,e[1]),!!function(){switch(typeof n){case"string":a=t.getElementById(n);break;case"object":(e=n)&&"object"==typeof e&&"nodeType"in e&&1===e.nodeType&&(a=n)}var e;return a}()&&!!(o=a.querySelectorAll("input, textarea, select")).length&&function(){var e,n,t,r=0,u={};for(r=0;r<o.length;r++)!(n=o[r]).name||""===n.name||n.disabled||p(n)&&!y(n)||(!1!==(t=m(n))||l.includeEmptyValuedElements)&&(1===(e=n.name.match(i)).length&&h(n,e,t||"",u),1<e.length&&g(n,e,t||"",u));return 0<s(u)&&u}())}}};"function"==typeof define&&define.amd?define(function(){return r}):"object"==typeof module&&module.exports?module.exports=r:E.formToObject=r}(window,document);

window.addEventListener('load', function () {
    let data = {
        home: {
            system: {
                local: 5200,
                server: 60000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        flat: {
            system: {
                local: 5200,
                server: 60000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        shop: {
            system: {
                local: 7200,
                server: 80000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        office: {
            system: {
                local: 5200,
                server: 60000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        store: {
            system: {
                local: 7200,
                server: 80000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        wash: {
            system: {
                local: 5200,
                server: 80000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        lift: {
            system: {
                local: 5200,
                server: 60000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        parking: {
            system: {
                local: 11200,
                server: 150000
            },
            cameras: {
                inhouse: 5300,
                house: 5000,
                fence: 5000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        airport: {
            system: {
                local: 21900,
                server: 300000
            },
            cameras: {
                inhouse: 12000,
                house: 5000,
                fence: 7000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        mall: {
            system: {
                local: 21900,
                server: 300000
            },
            cameras: {
                inhouse: 9200,
                house: 5000,
                fence: 7000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        },
        plant: {
            system: {
                local: 21900,
                server: 300000
            },
            cameras: {
                inhouse: 14000,
                house: 5000,
                fence: 7000,
            },
            period: {
                5: 3100,
                10: 4700,
                20: 4700,
                30: 6100,
                60: 8200
            },
            other: {
                record: 2000,
                remote: 5000
            }
        }
    }

    class Quiz {
        constructor(settings) {
            this.data = settings.data;
            this.quiz = document.querySelector(settings.selector);
            this.wrap = this.quiz.querySelector('.quiz__wrap');
            this.title = this.quiz.querySelector('.quiz__title');
            this.total = this.quiz.querySelector('.quiz__total');

            this.progress = this.quiz.querySelector('.qprogress progress');
            this.percents = this.quiz.querySelector('.qprogress__name b');

            this.steps = this.quiz.querySelectorAll(settings.steps);

            this.prevBtn = this.quiz.querySelector('.quiz__prev');
            this.nextBtn = this.quiz.querySelector('.quiz__next');

            this.activeIndex = 0;
            this.totalWeight = 10;

            this.stepActive = false;

            this.#init();

        }

        #init() {
            this.steps.forEach((step) => step.addEventListener('input', (e) => {
                if (e.target.classList.contains('jsRequired')) {
                    this.toggleBtns();
                }
            }));
            this.nextBtn.addEventListener('click', () => this.next());
            this.prevBtn.addEventListener('click', () => this.prev());
        }

        get isLastSlide() {
            return this.activeIndex == this.steps.length;
        }

        get isActive() {
            let inputs = Array.from(this.steps[this.activeIndex].querySelectorAll('.jsRequired'));

            if (inputs.some(i => i.type === 'range')) {
                return Array.from(inputs).some(i => i.value > 0);
            } else if (inputs.some(i => i.type === 'checkbox')) {
                return true;
            } else {
                return inputs.some(i => i.checked);
            }
        }

        get getTitle() {
            return this.steps[this.activeIndex].dataset.title;
        }

        get activeStep(){
            return this.steps[this.activeIndex];
        }

        toggleBtns = () => {
            if (this.isActive) {
                this.nextBtn.classList.remove('hidden');
            } else {
                this.nextBtn.classList.add('hidden');
            }

            if (this.activeIndex > 0) {
                this.prevBtn.classList.remove('hidden');
            } else {
                this.prevBtn.classList.add('hidden');
            }
        }

        prev() {
            this.activeIndex = this.activeIndex - 1;
            this.changeSlide(this.activeIndex);
        }

        next() {
            this.activeIndex = this.activeIndex + 1;
            this.changeSlide(this.activeIndex);
        }

        changeSlide(index) {
            if (this.isLastSlide) {
                this.finish();

            } else {
                this.title.innerHTML = this.getTitle;
                this.wrap.style.transform = `translateX(calc(-${index * 100}% - ${index * 30}px))`;
                this.updateProgress();
                this.toggleBtns();
            }

            if (window.innerWidth< 992){
                this.setHeight();
            }

        }

        updateProgress() {
            this.progress.value = this.activeIndex;
            this.percents.innerHTML = Math.floor(this.steps[this.activeIndex].dataset.weight / this.totalWeight * 100) + '%';
        }

        setHeight(){
            if (this.isLastSlide){
                this.wrap.style.height = `${this.total.offsetHeight}px`;
            } else {
                this.wrap.style.height = `${this.activeStep.offsetHeight}px`;
            }
        }

        finish() {
            this.total.classList.add('active');

            let dataForm = formToObject(this.quiz);

            let data = this.data[dataForm.type];
            let system = data.system[dataForm.system];
            let cameras = (data.cameras.inhouse * dataForm.cameras.inhouse) + (data.cameras.house * dataForm.cameras.house) + (data.cameras.fence * dataForm.cameras.fence);
            let period = data.period[dataForm.period];
            let other = data.other[dataForm.other] || 0;

            let total = system + cameras + period + other;

            this.total.querySelector('.qtotal__price').innerHTML = `${total.toLocaleString()} руб.`

        }

    }

    let quiz = new Quiz({
        selector: '.quiz',
        steps: '.qstep',
        data: data
    });

    class Range {
        constructor(list) {
            this.ranges = list;

            this.ranges.forEach(i => i.addEventListener('input', this.update))
        }

        update() {
            this.querySelector('.qrange__title b').innerHTML = this.querySelector('.qrange__range').value;
        }

    }

    let ranges = new Range(document.querySelectorAll('.qrange'));

});